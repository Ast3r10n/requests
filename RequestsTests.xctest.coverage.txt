/Users/andreasacerdoti/Projects/Personal/requests/Sources/Requests/DefaultRequestConfiguration.swift:
    1|       |//
    2|       |//  DefaultRequestConfiguration.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Andrea Sacerdoti on 22/01/2020.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |/// The protocol the app's specific configuration must implement.
   11|       |public protocol RequestConfiguration {
   12|       |  
   13|       |  /// The default Request headers.
   14|       |  ///
   15|       |  /// Any headers passed to specific `Requests` would be appended to these.
   16|       |  var defaultHeaders: [String: String] { get }
   17|       |
   18|       |  /// The Request protocol.
   19|       |  var requestProtocol: String { get }
   20|       |
   21|       |  /// The default base URL (not including protocol).
   22|       |  var baseURL: String { get }
   23|       |
   24|       |  /// The server's authentication realm.
   25|       |  var authenticationRealm: String { get }
   26|       |
   27|       |  /// The default authentication method to use with Requests.
   28|       |  var authenticationMethod: String { get }
   29|       |}
   30|       |
   31|       |public extension RequestConfiguration {
   32|       |
   33|       |  /// The URLProtectionSpace generated by the configuration properties.
   34|      1|  var protectionSpace: URLProtectionSpace {
   35|      1|    URLProtectionSpace(host: baseURL,
   36|      1|                       port: 443,
   37|      1|                       protocol: requestProtocol,
   38|      1|                       realm: authenticationRealm,
   39|      1|                       authenticationMethod: authenticationMethod)
   40|      1|  }
   41|       |}
   42|       |
   43|       |public extension RequestConfiguration {
   44|       |
   45|       |  /// Sets the configuration as default for a given `RequestConfigurationHolder`.
   46|       |  ///
   47|       |  /// Assigns the configuration to a given `RequestConfigurationHolder`. The configuration will be used
   48|       |  /// as the default for all subsequent Requests.
   49|       |  ///
   50|       |  /// - Parameter holder: The holder receiving the configuration. Defaults to the shared instance.
   51|      1|  func assign(to holder: RequestConfigurationHolder = RequestConfigurationHolder.shared) {
   52|      1|    holder.configuration = self
   53|      1|  }
   54|       |}
   55|       |
   56|       |/// The `RequestConfiguration` assigned to the `RequestConfigurationHolder` instance by default.
   57|       |open class DefaultRequestConfiguration: RequestConfiguration {
   58|       |
   59|     13|  open var defaultHeaders: [String: String] {
   60|     13|    [
   61|     13|      "Accept": "application/json",
   62|     13|      "Content-Type": "application/json",
   63|     13|    ]
   64|     13|  }
   65|       |
   66|     15|  open var requestProtocol: String {
   67|     15|    "https"
   68|     15|  }
   69|       |
   70|       |
   71|     17|  open var baseURL: String {
   72|     17|    "test.url.com"
   73|     17|  }
   74|       |
   75|      1|  open var authenticationRealm: String {
   76|      1|    "Restricted"
   77|      1|  }
   78|       |
   79|      1|  open var authenticationMethod: String {
   80|      1|    NSURLAuthenticationMethodDefault
   81|      1|  }
   82|       |
   83|     16|  public init() {
   84|     16|  }
   85|       |}

/Users/andreasacerdoti/Projects/Personal/requests/Sources/Requests/Request.swift:
    1|       |//
    2|       |//  Request.swift
    3|       |//
    4|       |//
    5|       |//  Created by Andrea Sacerdoti on 16.10.2019.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |/// An enum of CRUD REST method strings.
   11|       |public enum RESTMethod: String {
   12|       |  case get = "GET"
   13|       |  case post = "POST"
   14|       |  case put = "PUT"
   15|       |  case delete = "DELETE"
   16|       |  case patch = "PATCH"
   17|       |}
   18|       |
   19|       |/// A common interface for `Request`s and `RequestDecorator`s.
   20|       |public protocol AbstractRequest {
   21|       |  func perform(_ completionHandler: @escaping (
   22|       |    _ data: Data?,
   23|       |    _ response: URLResponse?,
   24|       |    _ error: Error?) throws -> Void) throws
   25|       |}
   26|       |
   27|       |/// Implemented by decorators to allow `request` overrides.
   28|       |public protocol RequestDecorator: AbstractRequest {
   29|       |
   30|       |  /// The `AbstractRequest` to decorate.
   31|       |  var request: AbstractRequest { get set }
   32|       |}
   33|       |
   34|       |/// A basic RESTful request object.
   35|       |///
   36|       |/// A `Request` object is a standalone task which should only exist within the scope of the request. Once initialised,
   37|       |/// use either the `perform(_:)` or `perform(decoding:_:)` methods to launch the request.
   38|       |/// `Request` properties are constants and only set within the initialiser.
   39|       |open class Request: AbstractRequest {
   40|       |  
   41|       |  // MARK: - Public Properties
   42|       |  /// The request REST method.
   43|       |  public let method: RESTMethod
   44|       |
   45|       |  /// The resource path URL component.
   46|       |  ///
   47|       |  /// - Note: Must begin with a forward slash ("/"), otherwise the `Request` `init` will throw an error.
   48|       |  public let resourcePath: String
   49|       |
   50|       |  /// The request parameters.
   51|       |  ///
   52|       |  /// - Note: Do not use this for the request body: use the `body` argument instead.
   53|       |  public let parameters: [String: String]?
   54|       |
   55|       |  /// The encoded request body.
   56|       |  public let body: Data?
   57|       |
   58|       |  /// The request headers.
   59|       |  ///
   60|       |  /// These headers will be appended to the specified `RequestConfiguration` `defaultHeaders`.
   61|       |  public let headers: [String: String]?
   62|       |
   63|       |  /// The `URLCredential` to be used for the request.
   64|       |  ///
   65|       |  /// If not provided, the request will use the default credential
   66|       |  /// stored in the `URLCredentialStorage` `shared` instance.
   67|       |  public let credential: URLCredential?
   68|       |
   69|       |  /// The request `URLSession`.
   70|       |  ///
   71|       |  /// Defaults to a session with a `default` `URLSessionConfiguration` unless otherwise specified.
   72|       |  public var session = URLSession(configuration: .default)
   73|       |
   74|       |  /// The wrapped `URLRequest` object.
   75|       |  public private(set) var urlRequest: URLRequest!
   76|       |
   77|       |  /// The request configuration.
   78|       |  ///
   79|       |  /// Defaults to the configuration stored in the `RequestConfigurationHolder` `shared` instance unless otherwise
   80|       |  /// specified.
   81|       |  open private(set) var configuration: RequestConfiguration = RequestConfigurationHolder.shared.configuration
   82|       |
   83|       |  // MARK: - Public Methods
   84|       |  /// Creates a `Request` with the specified properties.
   85|       |  /// - Parameters:
   86|       |  ///   - method: A REST method.
   87|       |  ///   - resourcePath: The resource path the request points to.
   88|       |  ///   - parameters: A dictionary of parameters. Defaults to nil.
   89|       |  ///   - body: An encoded body. Defaults to nil.
   90|       |  ///   - headers: A dictionary of headers to be appended to the configuration's `defaultHeaders`. Defaults to nil.
   91|       |  ///   - credential: A specific `URLCredential` to use with the request. Defaults to nil.
   92|       |  ///   - session: A specific `URLSession` to use with the request. Defaults to nil.
   93|       |  ///   - configuration: A specific `RequestConfiguration` to use with the request. Defaults to nil.
   94|       |  /// - Throws: An error if the `resourcePath` is malformed.
   95|       |  public init(_ method: RESTMethod,
   96|       |              atPath resourcePath: String,
   97|       |              parameters: [String: String]? = nil,
   98|       |              body: Data? = nil,
   99|       |              headers: [String: String]? = nil,
  100|       |              using credential: URLCredential? = nil,
  101|       |              onSession session: URLSession? = nil,
  102|     14|              configuration: RequestConfiguration? = nil) throws {
  103|     14|
  104|     14|    self.method = method
  105|     14|    self.resourcePath = resourcePath
  106|     14|    self.parameters = parameters
  107|     14|    self.body = body
  108|     14|    self.headers = headers
  109|     14|    self.credential = credential
  110|     14|
  111|     14|    if let configuration = configuration {
  112|     11|      self.configuration = configuration
  113|     14|    }
  114|     14|
  115|     14|    if let session = session {
  116|     13|      self.session = session
  117|     14|    }
  118|     14|
  119|     14|    self.urlRequest = try prepare()
  120|     14|  }
  121|       |
  122|       |  /// Performs the request, then executes the code block passed to the `completionHandler`.
  123|       |  /// - Parameters:
  124|       |  ///   - completionHandler: An handler called upon completion.
  125|       |  ///   - data: The response data.
  126|       |  ///   - response: The task response.
  127|       |  ///   - error: The task error.
  128|       |  /// - Throws: An error if either the `urlRequest` property was not properly initialised, or the `completionHandler`
  129|       |  ///   throws.
  130|       |  public func perform(_ completionHandler: @escaping (
  131|       |    _ data: Data?,
  132|       |    _ response: URLResponse?,
  133|      3|    _ error: Error?) throws -> Void) throws {
  134|      3|
  135|      3|    let task = session.dataTask(with: urlRequest) { data, response, error in
  136|      3|      try? completionHandler(data, response, error)
  137|      3|    }
  138|      3|
  139|      3|    if let credential = credential {
  140|      1|      URLCredentialStorage.shared.set(credential,
  141|      1|                                      for: configuration.protectionSpace,
  142|      1|                                      task: task)
  143|      3|    }
  144|      3|
  145|      3|    task.resume()
  146|      3|  }
  147|       |
  148|       |  /// Performs the request, trying to decode a specified `object` from the response,
  149|       |  /// and calls a handler upon completion.
  150|       |  /// - Parameters:
  151|       |  ///   - object: An object type to decode from the response data.
  152|       |  ///   - completionHandler: An handler called upon completion.
  153|       |  ///   - data: A decoded object.
  154|       |  ///   - response: The task response.
  155|       |  ///   - error: The task error.
  156|       |  public func perform<T: Codable>(decoding object: T.Type,
  157|       |                                  _ completionHandler: @escaping (
  158|       |    _ data: T?,
  159|       |    _ response: URLResponse?,
  160|      1|    _ error: Error?) -> Void) throws {
  161|      1|
  162|      1|    try perform { data, response, error in
  163|      1|      if error == nil,
  164|      1|        let data = data {
  165|      1|
  166|      1|        completionHandler(try JSONDecoder().decode(T.self, from: data), response, error)
  167|      1|      }
  168|      1|    }
  169|      1|  }
  170|       |
  171|       |  // MARK: - Private Methods
  172|     14|  private func prepare() throws -> URLRequest {
  173|     14|    guard let url = requestComponents.url else {
  174|      1|      throw NSError(domain: "Request",
  175|      1|                    code: 0,
  176|      1|                    userInfo: [NSLocalizedDescriptionKey: "Invalid request URL."])
  177|     13|    }
  178|     13|
  179|     13|    var request = URLRequest(url: url)
  180|     13|    request.httpMethod = method.rawValue
  181|     13|
  182|     26|    configuration.defaultHeaders.forEach { header in
  183|     26|      request.addValue(header.value, forHTTPHeaderField: header.key)
  184|     26|    }
  185|     13|
  186|     13|    if let headers = headers {
  187|     11|      headers.forEach { header in
  188|     11|        request.addValue(header.key, forHTTPHeaderField: header.value)
  189|     11|      }
  190|     13|    }
  191|     13|
  192|     13|    if let body = body {
  193|     11|      request.httpBody = body
  194|     13|    }
  195|     13|
  196|     13|    return request
  197|     13|  }
  198|       |
  199|     14|  private var requestComponents: URLComponents {
  200|     14|    var components = URLComponents()
  201|     14|    components.scheme = configuration.requestProtocol
  202|     14|    components.host = configuration.baseURL
  203|     14|    components.path = resourcePath
  204|     14|
  205|     14|    if let parameters = parameters {
  206|     11|      add(parameters, to: &components)
  207|     14|    }
  208|     14|
  209|     14|    return components
  210|     14|  }
  211|       |
  212|     11|  private func add(_ parameters: [String: String], to urlComponents: inout URLComponents) {
  213|     11|    if urlComponents.queryItems == nil {
  214|     11|      urlComponents.queryItems = []
  215|     11|    }
  216|     11|
  217|     11|    parameters.forEach { parameter in
  218|     11|      urlComponents.queryItems?.append(URLQueryItem(name: parameter.key, value: parameter.value))
  219|     11|    }
  220|     11|  }
  221|       |}

/Users/andreasacerdoti/Projects/Personal/requests/Sources/Requests/RequestConfigurationHolder.swift:
    1|       |//
    2|       |//  RequestConfigurationHolder.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Andrea Sacerdoti on 27/01/2020.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |/// A holder for a `RequestConfiguration` object to be used by `Request`s by default.
   11|       |public class RequestConfigurationHolder {
   12|       |
   13|       |  // MARK: - Public Properties
   14|       |  /// The holder singleton instance.
   15|       |  public static var shared = RequestConfigurationHolder()
   16|       |
   17|       |  // MARK: - Internal Properties
   18|       |  /// The configuration assigned to the holder.
   19|       |  var configuration: RequestConfiguration
   20|       |
   21|       |  // MARK: - Internal Methods
   22|       |  /// Creates a holder object, assigning the specified configuration.
   23|       |  ///
   24|       |  /// If no configuration is passed as an argument, a default configuration is used.
   25|       |  /// - Parameter configuration: A `RequestConfiguration` to assign to the holder.
   26|      2|  init(configuration: RequestConfiguration = DefaultRequestConfiguration()) {
   27|      2|    self.configuration = configuration
   28|      2|  }
   29|       |}

/Users/andreasacerdoti/Projects/Personal/requests/Tests/RequestsTests/Mocks/URLSessionCodableMock.swift:
    1|       |//
    2|       |//  URLSessionCodableMock.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Andrea Sacerdoti on 06/02/2020.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |class URLSessionCodableMock: URLSessionMock {
   11|      1|  override init() {
   12|      1|    super.init()
   13|      1|    let user = User()
   14|      1|    user.username = "test"
   15|      1|    self.data = try? JSONEncoder().encode(user)
   16|      1|  }
   17|       |}

/Users/andreasacerdoti/Projects/Personal/requests/Tests/RequestsTests/Mocks/URLSessionDataTaskMock.swift:
    1|       |//
    2|       |//  URLSessionDataTaskMock.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Andrea Sacerdoti on 05/02/2020.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |class URLSessionDataTaskMock: URLSessionDataTask {
   11|       |  private let completion: () -> Void
   12|       |
   13|      3|  init(completion: @escaping () -> Void) {
   14|      3|    self.completion = completion
   15|      3|  }
   16|       |
   17|      3|  override func resume() {
   18|      3|    completion()
   19|      3|  }
   20|       |}

/Users/andreasacerdoti/Projects/Personal/requests/Tests/RequestsTests/Mocks/URLSessionMock.swift:
    1|       |//
    2|       |//  URLSessionMock.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Andrea Sacerdoti on 05/02/2020.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |class URLSessionMock: URLSession {
   11|       |  var data: Data?
   12|       |  var response: URLResponse?
   13|       |  var error: Error?
   14|       |
   15|       |  override func dataTask(with request: URLRequest,
   16|      3|                         completionHandler: @escaping (Data?, URLResponse?, Error?) -> Void) -> URLSessionDataTask {
   17|      3|    URLSessionDataTaskMock {
   18|      3|      completionHandler(self.data, self.response, self.error)
   19|      3|    }
   20|      3|  }
   21|       |}

/Users/andreasacerdoti/Projects/Personal/requests/Tests/RequestsTests/RequestConfigurationTests.swift:
    1|       |//
    2|       |//  RequestConfigurationTests.swift
    3|       |//  
    4|       |//
    5|       |//  Created by Andrea Sacerdoti on 14/02/2020.
    6|       |//
    7|       |
    8|       |import XCTest
    9|       |@testable import Requests
   10|       |
   11|       |final class RequestConfigurationTests: XCTestCase {
   12|       |  var configuration = DefaultRequestConfiguration()
   13|       |
   14|      1|  override func setUp() {
   15|      1|    super.setUp()
   16|      1|    configuration = DefaultRequestConfiguration()
   17|      1|  }
   18|       |
   19|      1|  func testAssign() {
   20|      1|    let holder = RequestConfigurationHolder()
   21|      1|    configuration.assign(to: holder)
   22|      1|    XCTAssertNotNil(holder.configuration)
   23|      1|  }
   24|       |}

/Users/andreasacerdoti/Projects/Personal/requests/Tests/RequestsTests/RequestTests.swift:
    1|       |//
    2|       |//  RequestTests.swift
    3|       |//
    4|       |//
    5|       |//  Created by Andrea Sacerdoti on 16.10.2019.
    6|       |//
    7|       |
    8|       |import XCTest
    9|       |@testable import Requests
   10|       |
   11|       |final class RequestTests: XCTestCase {
   12|       |  var request: Request?
   13|       |
   14|     11|  override func setUp() {
   15|     11|    super.setUp()
   16|     11|    request = try? Request(.get,
   17|     11|                           atPath: "/user",
   18|     11|                           parameters: ["user": "12345"],
   19|     11|                           body: try? JSONSerialization.data(withJSONObject: ["testBody": "thisisatest"],
   20|     11|                                                             options: .fragmentsAllowed),
   21|     11|                           headers: ["Content-Type": "application/json"],
   22|     11|                           using: URLCredential(user: "test",
   23|     11|                                                password: "testPassword",
   24|     11|                                                persistence: .forSession),
   25|     11|                           onSession: URLSessionMock(),
   26|     11|                           configuration: DefaultRequestConfiguration())
   27|     11|  }
   28|       |
   29|      1|  func testInitMethod() {
   30|      1|    XCTAssertEqual(request?.method, RESTMethod(rawValue: "GET"))
   31|      1|  }
   32|       |
   33|      1|  func testInitResourcePath() {
   34|      1|    XCTAssertEqual(request?.resourcePath, URLComponents(string: "/user")?.url?.absoluteString)
   35|      1|  }
   36|       |
   37|      1|  func testInitParameters() {
   38|      1|    XCTAssertEqual(request?.parameters?["user"], "12345")
   39|      1|  }
   40|       |
   41|      1|  func testInitBody() {
   42|      1|    XCTAssertEqual(request?.urlRequest?.httpBody,
   43|      1|                   try? JSONSerialization.data(withJSONObject: ["testBody": "thisisatest"],
   44|      1|                                               options: .fragmentsAllowed))
   45|      1|  }
   46|       |
   47|      1|  func testInitHeaders() {
   48|      1|    XCTAssertEqual(request?.urlRequest?.allHTTPHeaderFields?["Content-Type"], "application/json")
   49|      1|  }
   50|       |
   51|      1|  func testInitCredential() {
   52|      1|    XCTAssertEqual(request?.credential, URLCredential(user: "test",
   53|      1|                                                      password: "testPassword",
   54|      1|                                                      persistence: .forSession))
   55|      1|  }
   56|       |
   57|      1|  func testInitThrow() {
   58|      1|    XCTAssertThrowsError(try Request(.get, atPath: "asd"))
   59|      1|  }
   60|       |
   61|      1|  func testInitConfiguration() {
   62|      1|    XCTAssertEqual(request?.configuration.baseURL, DefaultRequestConfiguration().baseURL)
   63|      1|  }
   64|       |
   65|      1|  func testPerform() {
   66|      1|    let resultExpectation = expectation(description: "Request should perform correctly")
   67|      1|
   68|      1|    try? request?
   69|      1|      .perform { data, response, error in
   70|      1|        XCTAssertNil(error)
   71|      1|        resultExpectation.fulfill()
   72|      1|    }
   73|      1|
   74|      1|    wait(for: [resultExpectation], timeout: 5)
   75|      1|  }
   76|       |
   77|      1|  func testPerformErrorReturn() {
   78|      1|    let throwExpectation = expectation(description: "Request should throw an error")
   79|      1|    let session = URLSessionMock()
   80|      1|    session.error = NSError(domain: "test", code: 42, userInfo: [NSLocalizedDescriptionKey: "Test error"])
   81|      1|
   82|      1|    try? Request(.get,
   83|      1|                 atPath: "/test",
   84|      1|                 onSession: session).perform { data, response, error in
   85|      1|                  XCTAssertNotNil(error)
   86|      1|                  throwExpectation.fulfill()
   87|      1|    }
   88|      1|
   89|      1|    wait(for: [throwExpectation], timeout: 5)
   90|      1|  }
   91|       |
   92|      1|  func testPerformDecoding() {
   93|      1|    let decodingExpectation = expectation(description: "Object should decode correctly")
   94|      1|
   95|      1|    try? Request(.get,
   96|      1|                 atPath: "/user",
   97|      1|                 onSession: URLSessionCodableMock())
   98|      1|      .perform(decoding: User.self) { object, response, error in
   99|      1|        if object?.username == "test" {
  100|      1|          decodingExpectation.fulfill()
  101|      1|        }
  102|      1|    }
  103|      1|
  104|      1|    wait(for: [decodingExpectation], timeout: 5)
  105|      1|  }
  106|       |
  107|       |  static var allTests = [
  108|       |    ("testInit", testInitMethod),
  109|       |    ("testInitResourcePath", testInitResourcePath),
  110|       |    ("testInitParameters", testInitParameters),
  111|       |    ("testInitHeaders", testInitHeaders),
  112|       |    ("testInitBody", testInitBody),
  113|       |    ("testPerform", testPerform),
  114|       |  ]
  115|       |}

